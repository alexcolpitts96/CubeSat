/*
 * Copyright (c) 2015, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * o Redistributions of source code must retain the above copyright notice, this list
 *   of conditions and the following disclaimer.
 *
 * o Redistributions in binary form must reproduce the above copyright notice, this
 *   list of conditions and the following disclaimer in the documentation and/or
 *   other materials provided with the distribution.
 *
 * o Neither the name of Freescale Semiconductor, Inc. nor the names of its
 *   contributors may be used to endorse or promote products derived from this
 *   software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

// standard libraries
#include "fsl_device_registers.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "math.h"

// custom libraries
#include "../RFM69/RFM69_driver.h"
#include "../UART1/UART1_driver.h"
#include "../FTM/FTM_driver.h"
#include "../UART0/UART0_driver.h"
#include "../SPI0/SPI0_driver.h"
#include "../GPIO/gpio.h" // included in RFM69 driver
#include "../Comms/Comms.h"
#include "../Camera/camera.h"
#include "../I2C/i2c.h"
#include "../I2C/i2c.h"

#include "OS_Function.h"


//------------Define_Fuction--------------//



//----------------------------------------//
	//Global Flag Register
	int check_bat_flag  = 0;// State 1
	int image_iden_flag = 0;// State 2
	int image_cap_flag  = 0;// State 3
	int prep_Tx_flag = 0; 	// State 4
	int listen_flag = 0;  	// State 5
	int tx_flag = 0;     	// State 6

	//Global Sleep Flag Condition
	int sleep_flag = 0;//Check battery state
    int sunlight=0;


#define MAX_IMAGE_SIZE 0x5FFFF

void master_init() {
	UART0_Init();
	UART1_putty_init();
	SPI0_Init(16);
	RFM69_DIO0_Init();
	RFM69_Init(); // must always be after the SPI interface has been enabled
	FTM0_init();
	FTM1_init();
	init_I2C();
	SPI1_Init(16);
	camera_init();
}

// disable all GPIO modules
void disable_modules() {
	// turn off port clocks, NOT and then masks to the register
	SIM_SCGC5 &= ~SIM_SCGC5_PORTA_MASK;
	SIM_SCGC5 &= ~SIM_SCGC5_PORTB_MASK;
	SIM_SCGC5 &= ~SIM_SCGC5_PORTC_MASK;
	SIM_SCGC5 &= ~SIM_SCGC5_PORTD_MASK;
	SIM_SCGC5 &= ~SIM_SCGC5_PORTE_MASK;

	// turn off module clocks, NOT and then mask to the register
	SIM_SCGC4 &= ~SIM_SCGC4_I2C0_MASK;
	SIM_SCGC6 &= ~SIM_SCGC6_SPI1_MASK;
	SIM_SCGC6 &= ~SIM_SCGC6_SPI0_MASK;
	SIM_SCGC6 &= ~SIM_SCGC6_FTM0_MASK;
	SIM_SCGC6 &= ~SIM_SCGC6_FTM1_MASK;
}

int main() {


	//uint8_t *buffer = (uint8_t *) calloc(PACKET_SIZE, sizeof(uint8_t));
	//uint8_t *camera = (uint8_t *) calloc(PACKET_SIZE, sizeof(uint8_t));

	uint8_t buffer_arr[PACKET_SIZE];
	uint8_t camera_arr[PACKET_SIZE];
	uint8_t *buffer = buffer_arr; // may need to be the address
	uint8_t *camera = camera_arr;
	uint8_t *image;


	master_init();

	//----------------------Global_Variable-------------//
	int reset=0;
	check_bat_flag=1;//Start the first state in the while 1 loop
	int Timeout=0;

	//--------------------------------------------------//
			//Check battery start
	LED();
	while(check_bat_flag==1){
	         	//1. Put the System into sleep
	        	//2. Set a delay block function
	        	//3. Wakes up after the duration


	        check_bat();
	        if (!sleep_flag){
	        	image_iden_flag=1;check_bat_flag=reset;}//If battery level is good, go to state 2
	}
	//-------------------------------------------------
	while(1){



	//----------------------------------------------------
	//Sleep Mode Condition
		while(sleep_flag==1){
			LED();
			//GPIOA_PSOR = 0x01 << 1;//PTA1 Red LED
			//1. Put the System into sleep
			//2. Set a delay block function
			//3. Wakes up after the duration

			//Check the battery once it take up from sleep

			//disable module before sleep
			disable_modules();
			LPTMR0_enable(10000); // wait 10000 seconds and enter sleep mode
			//
			check_bat();

			//If the battery still low put into sleep again
		}


	//--------------------------------------------------
		//image identification state 1

		while(image_iden_flag==1&&!sleep_flag){
			int imageI = 1;
			//check_solar();
			//Set the next flag ready
			check_solar(&sunlight);

					if (imageI&&sunlight){
						image_cap_flag=1;
					}

				//-------------------------------
				//check_bat(); this will be removed since we dont want to lose detumbling condition
				image_iden_flag=reset;//exit the state go to next state

				}



	//--------------------------------------------------
	        //Capture Image state 2
		while((image_cap_flag==1)&&!sleep_flag){


		    //--------------------------------------------------------------------
				//Capture the camera Task:
				//GPIOC_PSOR = 0x01 << 1;//turn on Camera via MOSFET switch
				//Capture the image
				//GPIOC_PCOR=0x01 << 1;//turn off the Camera via MOSFET switch
			//--------------------------------------------------------------------
				 prep_Tx_flag=1;//Set the Next flag ready

				 check_bat();
				 image_cap_flag=reset;//exit the state go to next state

	        }


	//--------------------------------------------------
	        //Transmit Preparation state (NO PN sequence which this state is NO GO)

		while(prep_Tx_flag==1&&!sleep_flag){
	        //bat=1;

			//Transmit Preparation:
				//Setup the Transmition in SPI module ready
				//Check the image size or location in the flash memory

			  listen_flag=1;//Set the next flag ready

			  check_bat();
			  prep_Tx_flag=reset;//exit the state go to next state

	                }

	//--------------------------------------------------
	            //Listen state 3
		while(listen_flag ==1&&!sleep_flag){

	    //bat=1;
				//Listen Mode:
					//Listen to the ground station for packet request
					//If (packet_request == 1){
					  tx_flag=1;//If ground station is heard set the next flag ready
					// }


					check_bat();
					listen_flag=reset;

	        }

	//--------------------------------------------------
	        //Transmit state 4
		while(tx_flag==1&&!sleep_flag){
/*
			 uint32_t block_number;
			 uint8_t block_arr[3];

			 // receive with until there is no timeout
			 while(!RFM69_RECEIVE_TIMEOUT(buffer)&&!sleep_flag){
				 Timeout++;
				 if(Timeout ==1000){
					 check_bat();
				 }
				 if(!sleep_flag){
					 Timeout=0;//reset the counter in the timeout function
				 }
			 } // rx packet now in buffer

					// look at received value and take proper action

					// if start command, send image size in bytes
					if ((memcmp(&start_command, buffer, sizeof(uint8_t) * PACKET_SIZE) == 0)) {
						block_arr[0] = image_length & 0xFF;
						block_arr[1] = (image_length >> 8) & 0xFF;
						block_arr[2] = (image_length >> 16) & 0xFF;

						// clear the buffer
						memset(buffer, 0, sizeof(uint8_t) * PACKET_SIZE);
						memcpy((uint8_t *) buffer, &block_arr, sizeof(uint8_t) * 3);

						// send the packet
						RFM69_SEND(buffer);
					}

					// if stop command erase the image
					else if ((memcmp(&stop_command, buffer, sizeof(uint8_t) * PACKET_SIZE) == 0)) {

                         image_iden_flag=1;
                         tx_flag=reset;//Start again from the beginning


					}

					// if packet request, send the requested packet
					else{
						block_number = (buffer[2] << 16) | (buffer[1] << 8) | (buffer[0]);
						//RFM69_SEND(buffer);
						//RFM69_SEND(program_buffer+(block_number * PACKET_SIZE));

						//RFM69_SEND(temp+(block_number * PACKET_SIZE));
					}
				//else {listen_flag=1;tx_flag=reset;}// go back to the listen mode again if ground station lost communication

 	 	 	 	 */
	        	check_bat();
				}

//---------------------------------End Of Line ----------------------------------
			}//While(1) Function

		}//Main Function

//---------------------------------Low Power Function ----------------------------------

